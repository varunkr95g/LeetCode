Module 1: Explore non relational data offerings in Azure
===========================================================

Explore Azure Table storage!!!!

Azure Table Storage implements the NoSQL key-value model. Data is stored as a sett of fields and item is uniquely identified by a keey. 

 An Azure table enables you to store semi-structured data. All rows in a table must have a key, but apart from that the columns in each row can vary.
 Data will usually be denormalized, with each row holding the entire data for a logical entity.
 
 To help ensure fast access, Azure Table Storage splits a table into partitions.Partitioning is a mechanism for grouping related rows, based on a common property or partition key.Rows that share the same partition key will be stored together. Partitioning not only helps to organize data, it can also improve scalability and performance:
 When you search for data, you can include the partition key in the search criteria. This helps to narrow down the volume of data to be examined, and improves performance by reducing the amount of I/O (reads and writes) needed to locate the data.
 
 The key in an Azure Table Storage table comprises two elements; the partition key that identifies the partition containing the row (as described above), and a row key that is unique to each row in the same partition. Items in the same partition are stored in row key order. If an application adds a new row to a table, Azure ensures that the row is placed in the correct position in the table.
 
 This scheme enables an application to quickly perform Point queries that identify a single row, and Range queries that fetch a contiguous block of rows in a partition.
 
 Use cases and management benefits of using Azure Table Storage!!!!!!
 
 Azure Table Storage tables are schemaless. It's easy to adapt your data as the needs of your application evolve.You can use tables to hold flexible datasets such as user data for web applications, address books, device information, or other types of metadata your service requires. The important part is to choose the partition and row keys carefully.
 
 Addvantags of Azure Table Storaage:

1. Quick writes irresopective of table volume
2. Quick reads provided thee partittion key and row keys are mentioned correctly.
3. Can stire huge amount of data ( 5 PB)
4. Can store semi-struured datta.

Disadvantages:

1. difficult to query non-key data. Full taable scan will be requird.
2. No rreationship b/w rows is mainained.

Azure Table Storage is an excellent mechanism for:

Storing TBs of structured data capable of serving web scale applications. Examples include product catalogs for eCommerce applications, and customer information, where the data can be quickly identified and ordered by a composite key.
In an IoT system, you might use Azure Table Storage to capture device sensor data. Each device could have its own partition, and the data could be ordered by the date and time each measurement was captured.
Capturing event logging and performance monitoring data. Event log and performance information typically contain data that is structured according to the type of event or performance measure being recorded


Explore Azure Blob storage!!!!!!!!!!!!!

The term blob is an acronym for Binary Large OBject.

Many applications need to store large, binary data objects, such as images and video streams

What is Azure Blob storage????????

Azure Blob storage is a service that enables you to store massive amounts of unstructured data, or blobs.
Azure currently supports three different types of blob:

Block blobs. A block blob is handled as a set of blocks. Each block can vary in size, up to 100 MB. A block blob can contain up to 50,000 blocks, giving a maximum size of over 4.7 TB. The block is the smallest amount of data that can be read or written as an individual unit. Block blobs are best used to store discrete, large, binary objects that change infrequently.

Page blobs. A page blob is organized as a collection of fixed size 512-byte pages. A page blob is optimized to support random read and write operations; you can fetch and store data for a single page if necessary. A page blob can hold up to 8 TB of data.

Append blobs. An append blob is a block blob optimized to support append operations. You can only add blocks to the end of an append blob; updating or deleting existing blocks isn't supported. Each block can vary in size, up to 4 MB. The maximum size of an append blob is just over 195 GB

Blob storage provides three access tiers, which help to balance access latency and storage cost:

The Hot tier is the default. You use this tier for blobs that are accessed frequently. The blob data is stored on high-performance media.

The Cool tier. This tier has lower performance and incurs reduced storage charges compared to the Hot tier. Use the Cool tier for data that is accessed infrequently. It's common for newly created blobs to be accessed frequently initially, but less so as time passes. 

The Archive tier. This tier provides the lowest storage cost, but with increased latency. The Archive tier is intended for historical data that mustn't be lost, but is required only rarely.To retrieve a blob from the Archive tier, you must change the access tier to Hot or Cool. The blob will then be rehydrated

Common uses of Azure Blob Storage include:

Storing files for distributed access
Streaming video and audio
Images.

General statement on Availability:

To ensure availability, Azure Blob storage provides redundancy. Blobs are always replicated three times in the region in which you created your account, but you can also select geo-redundancy, which replicates your data in a second region (at additional cost).


Explore Azure File storage!!!!!!!!

Azure File Storage enables you to create files shares in the cloud, and access these file shares from anywhere with an internet connection. Azure File Storage exposes file shares using the Server Message Block 3.0 (SMB) protocol. This is the same file sharing protocol used by many existing on-premises applications.

You create Azure File storage in a storage account. Azure File Storage enables you to share up to 100 TB of data in a single storage account.

Azure File Storage offers two performance tiers. The Standard tier uses hard disk-based hardware in a datacenter, and the Premium tier uses solid-state disks. The Premium tier offers greater throughput, but is charged at a higher rate.

Use cases and management benefits of using Azure File Storage!!!!!

Azure File Storage is designed to support many scenarios, including the following:

Migrate existing applications to the cloud.
Share server data across on-premises and cloud.
Simplify hosting High Availability (HA) workload data.


All data is encrypted at rest, and you can enable encryption for data in-transit between Azure File Storage and your applications.

Don't use Azure File Storage for files that can be written by multiple concurrent processes simultaneously.Multiple writers require careful synchronization, otherwise the changes made by one process can be overwritten by another. The alternative solution is to lock the file as it is written, and then release the lock when the write operation is complete. However, this approach can severely impact concurrency and limit performance.


Explore Azure Cosmos DB!!!!

Azure Cosmos DB is a multi-model NoSQL database management system. Cosmos DB manages data as a partitioned set of documents.

A document can hold up to 2 MB of data, including small binary objects. If you need to store larger blobs as part of a document, use Azure Blob storage, and add a reference to the blob in the document

The APIs that Cosmos DB currently supports include:

SQL API. This interface provides a SQL-like query language over documents, enable to identify and retrieve documents using SELECT statements.

Table API. This interface enables you to use the Azure Table Storage API to store and retrieve documents.The purpose of this interface is to enable you to switch from Table Storage to Cosmos DB without requiring that you modify your existing applications.

MongoDB API. You can use the MongoDB API for Cosmos DB to enable a MongoDB application to run unchanged against a Cosmos DB database. You can migrate the data in the MongoDB database to Cosmos DB running in the cloud, but continue to run your existing applications to access this data.

Cassandra API. Cassandra is a column family database management system. This is another database management system that many organizations run on-premises. As with the MongoDB API, the primary purpose of the Cassandra API is to enable you to quickly migrate Cassandra databases and applications to Cosmos DB.

Gremlin API. The Gremlin API implements a graph database interface to Cosmos DB. Data is still held as a set of documents in Cosmos DB, but the Gremlin API enables you to perform graph queries over data.

The primary purpose of the Table, MongoDB, Cassandra, and Gremlin APIs is to support existing applications. If you are building a new application and database, you should use the SQL API.

Documents in a Cosmos DB database are organized into containers. The documents in a container are grouped together into partitions. A partition holds a set of documents that share a common partition key.You designate one of the fields in your documents as the partition key. You should select a partition key that collects all related documents together. This approach helps to reduce the amount of I/O (disk reads) that queries might need to perform when retrieving a set of documents for a given entity. For example, customer_id in an ecommerce website.


There's a superficial similarity between a Cosmos DB container and a table in Azure Table storage: in both cases, data is partitioned and documents (rows in a table) are identified by a unique ID within a partition. However, the similarity ends there. Unlike Azure Table storage, documents in a Cosmos DB partition aren't sorted by ID. Instead, Cosmos DB maintains a separate index. This index contains not only the document IDs, but also tracks the value of every other field in each document. This index is created and maintained automatically. This index enables you to perform queries that specify criteria referencing any fields in a container, without incurring the need to scan the entire partition to find that data. 

Use cases and management benefits of using Azure Cosmos DB!!!!!

Cosmos DB is a highly scalable database management system. Cosmos DB automatically allocates space in a container for your partitions, and each partition can grow up to 10 GB in size. Indexes are created and maintained automatically. There's virtually no administrative overhead.

Cosmos DB is a foundational service in Azure. Cosmos DB has been used by many of Microsoft's products for mission critical applications at global scale, including Skype, Xbox, Microsoft 365, Azure, and many others. Cosmos DB is highly suitable for the following scenarios:


IoT and telematics. These systems typically ingest large amounts of data in frequent bursts of activity. Cosmos DB can accept and store this information very quickly.

Retail and marketing. Microsoft uses CosmosDB for its own e-commerce platforms that run as part of Windows Store and Xbox Live. It's also used in the retail industry for storing catalog data and for event sourcing in order processing pipelines

Gaming. The database tier is a crucial component of gaming applications. Modern games perform graphical processing on mobile/console clients, but rely on the cloud to deliver customized and personalized content like in-game stats, social media integration, and high-score leaderboards

Web and mobile applications












